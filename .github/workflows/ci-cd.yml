name: Full Stack CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - '.github/**'
      - '.vscode/**'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - '.github/**'
      - '.vscode/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_ORG: ${{ github.repository_owner }}
  NODE_VERSION: '20.x' 

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      client_changed: ${{ steps.changes.outputs.client_changed }}
      server_changed: ${{ steps.changes.outputs.server_changed }}
      worker_changed: ${{ steps.changes.outputs.worker_changed }}
      nginx_changed: ${{ steps.changes.outputs.nginx_changed }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          # the current commit is the one we are proposing in the PR
          fetch-depth: 2
          
      - name: Get changed files
        id: changes
        uses: tj-actions/changed-files@v44
        with:
          files_ignore: |
            README.md
            LICENSE
            .gitignore
          files: |
            client:
              - 'client/**'
            worker:
              - 'worker/**'
            server:
              - 'server/**'
            nginx:
              - 'nginx/**'
            
      - name: Set output variables
        id: set_outputs
        run: |
          echo "client_changed=${{ steps.changes.outputs.client_changed }}" >> $GITHUB_OUTPUT
          echo "server_changed=${{ steps.changes.outputs.server_changed }}" >> $GITHUB_OUTPUT
          echo "worker_changed=${{ steps.changes.outputs.worker_changed }}" >> $GITHUB_OUTPUT
          echo "nginx_changed=${{ steps.changes.outputs.nginx_changed }}" >> $GITHUB_OUTPUT
  
  client-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'

      - name: Install Dependencies
        run: npm install
        working-directory: ./client

      - name: Run Client Unit Tests
        run: npm test -- --watchAll=false
        working-directory: ./client

  build-and-push-all:
    name: Build & Push All Services
    
    needs: [client-tests, detect-changes]
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx and Login
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set Image Tags (SHA)
        id: image_tags
        run: echo "SHA_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT
      
      - name: Set Change Flags
        id: flags
        run: |
          echo "CLIENT_CHANGED=${{ needs.detect-changes.outputs.client_changed }}" >> $GITHUB_OUTPUT
          echo "SERVER_CHANGED=${{ needs.detect-changes.outputs.server_changed }}" >> $GITHUB_OUTPUT
          echo "WORKER_CHANGED=${{ needs.detect-changes.outputs.worker_changed }}" >> $GITHUB_OUTPUT
          echo "NGINX_CHANGED=${{ needs.detect-changes.outputs.nginx_changed }}" >> $GITHUB_OUTPUT

      # --- A. Build and Push: CLIENT ---
      - name: Build & Push Client Image
        if: steps.flags.outputs.CLIENT_CHANGED == 'true'
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/client
          docker compose build --no-push client
          docker tag client:latest $IMAGE:latest
          docker tag client:latest $IMAGE:${{ steps.image_tags.outputs.SHA_TAG }}
          docker push $IMAGE:latest
          docker push $IMAGE:${{ steps.image_tags.outputs.SHA_TAG }}
        
      # --- B. Build and Push: SERVER ---
      - name: Build & Push SERVER Image
        if: steps.flags.outputs.SERVER_CHANGED == 'true'
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/server
          SHA_TAG=${{ steps.image_tags.outputs.SHA_TAG }}

          docker compose build --no-push server
          
          docker tag server:latest $IMAGE:latest
          docker tag server:latest $IMAGE:$SHA_TAG
          docker push $IMAGE:latest
          docker push $IMAGE:$SHA_TAG

      # --- C. Build and Push: WORKER ---
      - name: Build & Push Worker Image
        if: steps.flags.outputs.WORKER_CHANGED == 'true'
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/worker
          SHA_TAG=${{ steps.image_tags.outputs.SHA_TAG }}

          docker compose build --no-push worker
          
          docker tag worker:latest $IMAGE:latest
          docker tag worker:latest $IMAGE:$SHA_TAG
          docker push $IMAGE:latest
          docker push $IMAGE:$SHA_TAG

      # --- D. Build and Push: NGINX ---
      - name: Build & Push Nginx Image
        if: steps.flags.outputs.NGINX_CHANGED == 'true' || steps.flags.outputs.CLIENT_CHANGED == 'true' || steps.flags.outputs.SERVER_CHANGED == 'true'
        run: |
          NGINX_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/nginx
          SHA_TAG=${{ steps.image_tags.outputs.SHA_TAG }}

          docker compose build --no-push nginx
          docker tag nginx:latest $NGINX_IMAGE:latest
          docker tag nginx:latest $NGINX_IMAGE:$SHA_TAG
          docker push $NGINX_IMAGE:latest
          docker push $NGINX_IMAGE:$SHA_TAG